Decision changed against C++: I realised that C++ might be good shooting your entire foot off, but hey it is easy to get started with something difficult with C++ since it is likely that whatever you need is already there and that it is a pretty amorphous language.

Decisions, ray pointing in vs pointing out. Normals pointing against the ray, then you will not be able to use the dot product.

Camera position: negative positions corresponds to in front and behind the camera.

Debugging ray tracer: use a nonsquare image, 16:9

Viewport width distinguished between aspect ratio: because real valued of image_height.

Rays as classes: represent parameterised lines with a class.

.h: write a lot of .h utilities and include them in your code so that it becomes cleaner or more parameterised.

vec3 class: when writing a ray tracer, try to read a linear algebra book or a diff geo / functional analysis book and define all sorts of norms you might use. Pretty sure if you get creative in defining headers for use with linear algebra you can write some decent projects.